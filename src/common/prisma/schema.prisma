generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Conference {
  AMERICAN
  ACC
  BIG_12
  BIG_TEN
  CONFERENCE_USA
  FBS_INDEPENDENT
  MID_AMERICAN
  MOUNTAIN_WEST
  PAC_12
  SEC
  SUN_BELT
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  FINAL
}

enum GameType {
  REGULAR_SEASON
  CONFERENCE_CHAMPIONSHIP
  BOWL
  PLAYOFF_FIRST_ROUND
  QUARTERFINAL
  SEMIFINAL
  NATIONAL_CHAMPIONSHIP
}

model Game {
  id   Int    @id @default(autoincrement())
  slug String @unique

  name             String?
  date             DateTime
  isTimeTBD        Boolean    @map("is_time_tbd")
  status           GameStatus @default(SCHEDULED)
  weekNumber       Int?       @map("week_number")
  gameType         GameType   @map("game_type")
  isConferenceGame Boolean    @map("is_conference_game")
  isNeutralSite    Boolean    @map("is_neutral_site")
  endedInOvertime  Boolean    @default(false) @map("ended_in_overtime")
  overtimes        Int?

  seasonId  Int @map("season_id")
  stadiumId Int @map("stadium_id")

  season           Season            @relation(fields: [seasonId], references: [id])
  stadium          Stadium           @relation(fields: [stadiumId], references: [id])
  gameParticipants GameParticipant[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([seasonId, date, stadiumId])
  @@map("games")
}

model Season {
  id   Int    @id @default(autoincrement())
  slug String @unique

  name            String   @unique
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")
  isCurrentSeason Boolean  @default(false) @map("is_current_season")

  games                  Game[]
  teamSeasonPerformances TeamSeasonPerformance[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("seasons")
}

model Stadium {
  id   Int    @id @default(autoincrement())
  slug String @unique

  name     String
  field    String?
  nickname String?
  city     String
  state    String
  capacity Int?

  teams Team[]
  games Game[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_date")

  @@unique([name, city, state])
  @@map("stadiums")
}

model Team {
  id   Int    @id @default(autoincrement())
  slug String @unique

  displayName      String      @unique @map("display_name")
  shortDisplayName String      @unique @map("short_display_name")
  abbreviation     String      @unique
  mascot           String
  conference       Conference?

  stadiumId Int? @map("stadium_id")

  stadium                Stadium?                @relation(fields: [stadiumId], references: [id])
  logo                   Logo?
  gameParticipants       GameParticipant[]
  teamSeasonPerformances TeamSeasonPerformance[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teams")
}

model GameParticipant {
  id Int @id @default(autoincrement())

  isHomeTeam Boolean  @map("is_home_team")
  score      Int?
  isWinner   Boolean? @map("is_winner")

  gameId Int @map("game_id")
  teamId Int @map("team_id")

  game Game @relation(fields: [gameId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([gameId, teamId])
  @@map("game_participants")
}

model Logo {
  id Int @id @default(autoincrement())

  url     String @unique
  darkUrl String @unique @map("dark_url")
  width   Int    @default(500)
  height  Int    @default(500)
  alt     String

  teamId Int @unique @map("team_id")

  team Team @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("logos")
}

model TeamSeasonPerformance {
  id Int @id @default(autoincrement())

  wins             Int?
  losses           Int?
  conferenceWins   Int? @map("conference_wins")
  conferenceLosses Int? @map("conference_losses")
  homeWins         Int? @map("home_wins")
  homeLosses       Int? @map("home_losses")
  awayWins         Int? @map("away_wins")
  awayLosses       Int? @map("away_losses")
  neutralWins      Int? @map("neutral_wins")
  neutralLosses    Int? @map("neutral_losses")

  streak      Int?
  isWinStreak Boolean? @map("is_win_streak")

  conferenceRank Int? @map("conference_rank")
  apPoll         Int? @map("ap_poll")
  coachesPoll    Int? @map("coaches_poll")
  cfpRank        Int? @map("cfp_rank")

  totalDefense                Int? @map("total_defense")
  totalOffense                Int? @map("total_offense")
  footballPowerIndex          Int? @map("football_power_index")
  strengthOfRecord            Int? @map("strength_of_record")
  strengthOfSchedule          Int? @map("strength_of_schedule")
  remainingStrengthOfSchedule Int? @map("remaining_strength_of_schedule")

  teamId   Int @map("team_id")
  seasonId Int @map("season_id")

  team   Team   @relation(fields: [teamId], references: [id])
  season Season @relation(fields: [seasonId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([teamId, seasonId])
  @@map("team_season_performances")
}
